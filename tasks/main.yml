---
- name: install Janus Gateway
  import_tasks: janus.yml
  tags:
    - janus
  when: tinypilot_install_janus

- name: install uStreamer
  import_tasks: ustreamer.yml
  tags:
    - ustreamer

- name: install nginx
  import_tasks: nginx.yml

- name: create the `lib` directory if it does not exist
  file:
    path: "{{ tinypilot_privileged_dir }}/lib"
    state: directory

- name: copy `lib` scripts
  copy:
    src: "{{ item }}"
    dest: "{{ tinypilot_privileged_dir }}/lib/{{ item | basename }}"
    owner: root
    group: root
    mode: '0755'
  with_fileglob:
    - lib/*

- name: install HID USB gadget
  import_tasks: install_usb_gadget.yml

- name: create tinypilot group
  group:
    name: "{{ tinypilot_group }}"
    state: present

- name: create tinypilot user
  user:
    name: "{{ tinypilot_user }}"
    group: "{{ tinypilot_group }}"
    system: yes
    create_home: yes

- name: copy admin scripts
  copy:
    src: "{{ item }}"
    dest: "{{ tinypilot_privileged_dir }}/{{ item }}"
    owner: root
    group: root
    mode: '0755'
  with_items:
    - change-hostname
    - collect-debug-logs
    - read-update-log
    - update
    - update-video-settings

- name: store passwordless sudo paths
  set_fact:
    sudo_paths:
      - /sbin/shutdown
      - /usr/sbin/service tinypilot-updater start
      - "{{ tinypilot_privileged_dir }}/change-hostname"
      - "{{ tinypilot_privileged_dir }}/collect-debug-logs"
      - "{{ tinypilot_privileged_dir }}/read-update-log"
      - "{{ tinypilot_privileged_dir }}/update"
      - "{{ tinypilot_privileged_dir }}/update-video-settings"

- name: enable tinypilot to execute a whitelist of commands as sudo
  lineinfile:
    dest: /etc/sudoers
    state: present
    line: "{{ tinypilot_user }} ALL=(ALL) NOPASSWD: {{ sudo_paths | join(', ') }}"
    regexp: "^{{ tinypilot_user }}"
    validate: sudo /usr/sbin/visudo -cf %s

- name: install TinyPilot Debian package
  apt:
    deb: "{{ tinypilot_debian_package_path }}"

- name: find absolute path to python3
  shell: realpath $(which python3)
  register: realpath_python3
  changed_when: false

- name: save absolute path to python3
  set_fact:
    python3_abs_path: "{{ realpath_python3.stdout }}"

- name: create TinyPilot virtualenv
  pip:
    virtualenv: "{{ tinypilot_dir }}/venv"
    virtualenv_command: "{{ python3_abs_path }} -m venv venv"
    requirements: "{{ tinypilot_dir }}/requirements.txt"
    extra_args: "{{ tinypilot_pip_args }}"
  notify:
    - restart TinyPilot service

- name: create TinyPilot app settings
  template:
    src: tinypilot-app-settings.cfg.j2
    dest: "{{ tinypilot_app_settings_file }}"
    owner: "{{ tinypilot_user }}"
    group: "{{ tinypilot_group }}"
  notify:
    - restart TinyPilot service
  tags:
    - app-settings

- name: fix TinyPilot folder permissions
  file:
    path: "{{ tinypilot_dir }}"
    state: directory
    owner: "{{ tinypilot_user }}"
    group: "{{ tinypilot_group }}"
    recurse: yes
  tags:
    - molecule-idempotence-notest

- name: install TinyPilot as a service
  template:
    src: tinypilot.systemd.j2
    dest: /lib/systemd/system/tinypilot.service
    owner: root
    group: root
    mode: '0644'
  notify:
    - reload TinyPilot systemd config
    - restart TinyPilot service
  tags:
    - systemd-config

- name: enable systemd TinyPilot service file
  systemd:
    name: tinypilot
    enabled: yes

- name: install tinypilot-updater as a service
  template:
    src: tinypilot-updater.systemd.j2
    dest: /lib/systemd/system/tinypilot-updater.service
    owner: root
    group: root
    mode: '0644'
  notify:
    - reload tinypilot updater systemd config
